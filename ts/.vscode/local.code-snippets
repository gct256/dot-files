{
  "react component": {
    "scope": "typescriptreact",
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "// import classnames from 'classnames';",
      "",
      "type ${TM_FILENAME_BASE/\\.//g}Props = {",
      "  foo?: string;${0}",
      "};",
      "",
      "export const ${TM_FILENAME_BASE/\\.//g}: React.FC<${TM_FILENAME_BASE/\\.//g}Props> = ({",
      "  foo,",
      "  children,",
      "}: React.PropsWithChildren<${TM_FILENAME_BASE/\\.//g}Props>): React.ReactElement | null => {",
      "  return (",
      "    <div>",
      "      {foo}",
      "      {children}",
      "    </div>",
      "  );",
      "};",
      "",
      "${TM_FILENAME_BASE/\\.//g}.displayName = '${TM_FILENAME_BASE/\\.//g}';",
      "",
      "${TM_FILENAME_BASE/\\.//g}.defaultProps = {",
      "  foo: 'Foo',",
      "};",
      ""
    ]
  },
  "react component (no props)": {
    "scope": "typescriptreact",
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "// import classnames from 'classnames';",
      "",
      "export const ${TM_FILENAME_BASE/\\.//g}: React.FC = (): React.ReactElement | null => {",
      "  return null;",
      "};",
      "",
      "${TM_FILENAME_BASE/\\.//g}.displayName = '${TM_FILENAME_BASE/\\.//g}';",
      ""
    ]
  },
  "re-ducks state (type only)": {
    "scope": "typescript",
    "prefix": "state",
    "body": [
      "import { Map } from 'immutable';",
      "",
      "export type ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State = Map<string, boolean>;",
      "",
      "export const create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State = (): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State => Map();",
      ""
    ]
  },
  "re-ducks state (use Record)": {
    "scope": "typescript",
    "prefix": "state",
    "body": [
      "import { Record } from 'immutable';",
      "",
      "export type ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Data = {",
      "  $0",
      "};",
      "",
      "export class ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State",
      "  extends Record({",
      "    $0",
      "  })",
      "  implements ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Data {}",
      "",
      "export const create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State = (): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State => new ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State();",
      ""
    ]
  },
  "re-ducks action types": {
    "scope": "typescript",
    "prefix": "types",
    "body": [
      "export const ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}: '${TM_DIRECTORY/.*\\///}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}' = '${TM_DIRECTORY/.*\\///}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}' as const;",
      ""
    ]
  },
  "re-ducks actions": {
    "scope": "typescript",
    "prefix": "actions",
    "body": [
      "import * as types from './types';",
      "",
      "$0",
      "",
      "export type ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action = ",
      ""
    ]
  },
  "re-ducks action": {
    "scope": "typescript",
    "prefix": "action",
    "body": [
      "type ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action = {",
      "  type: typeof types.${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g};",
      "  payload: {",
      "    $0",
      "  };",
      "};",
      "",
      "export const $1 = (payload: ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action['payload']): ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action => ({",
      "  type: types.${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g},",
      "  payload,",
      "})",
      ""
    ]
  },
  "re-ducks reducer": {
    "scope": "typescript",
    "prefix": "reducer",
    "body": [
      "import * as types from './types';",
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action } from './actions';",
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State, create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State } from './state';",
      "",
      "export const ${TM_DIRECTORY/.*\\///}Reducer = (",
      "  state: ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State = create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State(),",
      "  action: ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action,",
      "): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State => {",
      "  switch (action.type) {",
      "    case types.$0:",
      "      break;",
      "",
      "    default:",
      "      return state;",
      "  }",
      "};",
      ""
    ]
  },
  "re-ducks operations": {
    "scope": "typescript",
    "prefix": "operations",
    "body": [
      "import * as actions from './actions';",
      "",
      "import { AppDispatch } from '..';",
      ""
    ]
  },
  "re-ducks operation": {
    "scope": "typescript",
    "prefix": "operation",
    "body": [
      "export const $1 = async (dispatch: AppDispatch$2$0): Promise<void> => {",
      "  dispatch(actions.$1());",
      "};",
      ""
    ]
  },
  "re-ducks selectors": {
    "scope": "typescript",
    "prefix": "selectors",
    "body": [
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State } from './state';",
      "",
      "import { AppState } from '..';",
      "",
      "export const get = (state: AppState): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}State => state.${TM_DIRECTORY/.*\\///};",
      ""
    ]
  },
  "re-ducks selector": {
    "scope": "typescript",
    "prefix": "selector",
    "body": ["export const $1 = (state: AppState): $2 => $3;", ""]
  },
  "re-ducks index": {
    "scope": "typescript",
    "prefix": "index",
    "body": [
      "import * as ${TM_DIRECTORY/.*\\///}Operations from './operations';",
      "import * as ${TM_DIRECTORY/.*\\///}Selectors from './selectors';",
      "",
      "export { ${TM_DIRECTORY/.*\\///}Operations, ${TM_DIRECTORY/.*\\///}Selectors };",
      ""
    ]
  },
  "re-ducks app": {
    "scope": "typescript",
    "prefix": "app",
    "body": [
      "import { AnyAction, Dispatch, combineReducers } from 'redux';",
      "",
      "export type AppState = {",
      "",
      "};",
      "",
      "export type AppAction =  | AnyAction;",
      "",
      "export type AppDispatch = Dispatch<AppAction>;",
      "",
      "export const appReducer = combineReducers({",
      "",
      "});",
      ""
    ]
  }
}
