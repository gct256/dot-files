{
  "react component": {
    "scope": "typescriptreact",
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "import classnames from 'classnames';",
      "",
      "type ${TM_FILENAME_BASE}Props = {",
      "  foo?: string;${0}",
      "};",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = ({foo}: ${TM_FILENAME_BASE}Props): React.ReactElement | null => {",
      "  return <div>{foo}</div>;",
      "};",
      "",
      "${TM_FILENAME_BASE}.displayName = '${TM_FILENAME_BASE}';",
      "",
      "${TM_FILENAME_BASE}.defaultProps = {",
      "  foo: 'Foo',",
      "}"
    ]
  },
  "react component (no props)": {
    "scope": "typescriptreact",
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "import classnames from 'classnames';",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC = (): React.ReactElement | null => {",
      "  return <div>{foo}</div>;",
      "};",
      "",
      "${TM_FILENAME_BASE}.displayName = '${TM_FILENAME_BASE}';"
    ]
  },
  "re-ducks state (type only)": {
    "scope": "typescript",
    "prefix": "state",
    "body": [
      "import { Map } from 'immutable';",
      "",
      "export type ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} = Map<string, boolean>;",
      "",
      "export const create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} = (): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} => Map();"
    ]
  },
  "re-ducks state (use Record)": {
    "scope": "typescript",
    "prefix": "state",
    "body": [
      "import { Record } from 'immutable';",
      "",
      "export type ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Data = {",
      "};",
      "",
      "export class ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}",
      "  extends Record({",
      "  })",
      "  implements ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Data {}",
      "",
      "export const create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} = (): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} => new ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}();"
    ]
  },
  "re-ducks action types": {
    "scope": "typescript",
    "prefix": "types",
    "body": [
      "export const ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}: '${TM_DIRECTORY/.*\\///}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}' = '${TM_DIRECTORY/.*\\///}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}';"
    ]
  },
  "re-ducks actions": {
    "scope": "typescript",
    "prefix": "actions",
    "body": [
      "import * as types from './types';",
      "",
      "export type ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action = "
    ]
  },
  "re-ducks action": {
    "scope": "typescript",
    "prefix": "action",
    "body": [
      "type ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action = {",
      "  type: typeof types.${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g};",
      "  payload: {",
      "    $0",
      "  };",
      "};",
      "",
      "export const $1 = (payload: ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action['payload']): ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action => ({",
      "  type: types.${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g},",
      "  payload,",
      "})"
    ]
  },
  "re-ducks action creator": {
    "scope": "typescript",
    "prefix": "action creator",
    "body": [
      "export const $1 = (payload: ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action['payload']): ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/capitalize}$3$4/g}Action => ({",
      "  type: types.${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g},",
      "  payload,",
      "})"
    ]
  },
  "re-ducks reducer": {
    "scope": "typescript",
    "prefix": "reducer",
    "body": [
      "import * as types from './types';",
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action } from './actions';",
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}, create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} } from './state';",
      "",
      "export const ${TM_DIRECTORY/.*\\///}Reducer = (",
      "  state: ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} = create${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}(),",
      "  action: ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action,",
      "): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} => {",
      "  switch (action.type) {",
      "    default:",
      "      return state;",
      "  }",
      "};"
    ]
  },
  "re-ducks operations": {
    "scope": "typescript",
    "prefix": "operations",
    "body": [
      "import * as actions from './actions';",
      "",
      "import { AppDispatch } from '..';"
    ]
  },
  "re-ducks operation": {
    "scope": "typescript",
    "prefix": "operation",
    "body": [
      "export const $1 = async (dispatch: AppDispatch$2$0): Promise<void> => {",
      "  dispatch(actions.$1());",
      "};"
    ]
  },
  "re-ducks selectors": {
    "scope": "typescript",
    "prefix": "selectors",
    "body": [
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} } from './state';",
      "",
      "import { AppState } from '..';",
      "",
      "export const getAll = (state: AppState): ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/} => state.${TM_DIRECTORY/.*\\///};"
    ]
  },
  "re-ducks selector": {
    "scope": "typescript",
    "prefix": "selector",
    "body": ["export const $1 = (state: AppState): $2 => $3;"]
  },
  "re-ducks index": {
    "scope": "typescript",
    "prefix": "index",
    "body": [
      "import * as ${TM_DIRECTORY/.*\\///}Operations from './operations';",
      "import * as ${TM_DIRECTORY/.*\\///}Selectors from './selectors';",
      "",
      "export { ${TM_DIRECTORY/.*\\///}Operations, ${TM_DIRECTORY/.*\\///}Selectors };"
    ]
  },
  "re-ducks app": {
    "scope": "typescript",
    "prefix": "app",
    "body": [
      "import { AnyAction, Dispatch, combineReducers } from 'redux';",
      "",
      "export type AppState = {",
      "};",
      "",
      "export type AppAction = AnyAction;",
      "",
      "export type AppDispatch = Dispatch<AppAction>;",
      "",
      "export const appReducer = combineReducers({",
      "});"
    ]
  }
}
