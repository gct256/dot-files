{
  "react component (fc)": {
    "scope": "typescriptreact",
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "  foo?: string;${0}",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = ({foo}: ${TM_FILENAME_BASE}Props) => (",
      "  <div>{foo}</div>",
      ")",
      "",
      "${TM_FILENAME_BASE}.displayName = '${TM_FILENAME_BASE}';",
      "",
      "${TM_FILENAME_BASE}.defaultProps = {",
      "  foo: 'Foo',",
      "}"
    ]
  },
  "react component (class)": {
    "scope": "typescriptreact",
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "  foo?: string;",
      "}",
      "",
      "interface ${TM_FILENAME_BASE}State {",
      "  bar: string;",
      "}",
      "",
      "export class ${TM_FILENAME_BASE} extends React.Component<${TM_FILENAME_BASE}Props, ${TM_FILENAME_BASE}State> {",
      "  public static defaultProps: Partial<${TM_FILENAME_BASE}Props> = {",
      "    foo: 'Foo',",
      "  };",
      "",
      "  public state: ${TM_FILENAME_BASE}State = {",
      "    bar: 'Bar',",
      "  };",
      "",
      "  public render() {",
      "    const { foo } = this.props;",
      "    const { bar } = this.state;",
      "",
      "    return <>{foo}{bar}</>",
      "  }",
      "}"
    ]
  },
  "react component (redux)": {
    "scope": "typescript,typescriptreact",
    "prefix": "react",
    "body": [
      "import * as React from 'react';",
      "import { connect } from 'react-redux';",
      "",
      "function mapStateToProps() {",
      "  return {${0}",
      "  };",
      "}",
      "",
      "function mapDispatchToProps() {",
      "  return {",
      "  };",
      "}",
      "",
      "type ${TM_FILENAME_BASE}Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;",
      "",
      "class ${TM_FILENAME_BASE}Component extends React.Component<${TM_FILENAME_BASE}Props> {",
      "}",
      "",
      "const ${TM_FILENAME_BASE}Component: React.FC<${TM_FILENAME_BASE}Props> = () => <></>;",
      "",
      "export const ${TM_FILENAME_BASE} = connect(mapStateToProps, mapDispatchToProps)(${TM_FILENAME_BASE}Component);"
    ]
  },
  "redux module": {
    "scope": "typescript",
    "prefix": "redux",
    "body": [
      "// ==== state",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State {}",
      "",
      "export function createInitial${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State(): ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State {",
      "  return {};",
      "}",
      "",
      "// ==== action type",
      "$0",
      "export const ${TM_FILENAME_BASE}ActionTypes = {",
      "};",
      "",
      "// ==== action creator",
      "",
      "export const ${TM_FILENAME_BASE}ActionCreators = {",
      "};",
      "",
      "// ==== action",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Action = void;",
      "",
      "// ==== reducer",
      "",
      "export function ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}Reducer(",
      "  state: ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State = createInitial${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State(),",
      "  action: ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Action,",
      "): ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State {",
      "  switch (action.type) {",
      "    default:",
      "      return state;",
      "  }",
      "}"
    ]
  },
  "redux module (combined)": {
    "scope": "typescript",
    "prefix": "redux",
    "body": [
      "import { AnyAction, Dispatch, Store, combineReducers } from 'redux';",
      "",
      "// ==== state",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State {",
      "  ${1},",
      "}",
      "",
      "// ==== action",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Action = AnyAction;",
      "",
      "// ==== dispatch",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Dispatch extends Dispatch<${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Action> {}",
      "",
      "// ==== reducer",
      "",
      "export const ${TM_FILENAME_BASE}Reducer = combineReducers({",
      "  ${3},",
      "});",
      "",
      "// ==== store",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Store extends Store<${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State, ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Action> {}"
    ]
  },
  "redux action": {
    "scope": "typescript",
    "prefix": "action",
    "body": [
      "const ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}: '${TM_FILENAME_BASE}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}' = '${TM_FILENAME_BASE}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}';",
      "",
      "function ${1}(${2})${0} {",
      "  return {",
      "    type: ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g},",
      "    payload: { ${2} },",
      "  };",
      "}",
      "",
      "type ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}${1/(.*)/${1:/capitalize}/}Action = ReturnType<typeof ${1}>;"
    ]
  }
}
